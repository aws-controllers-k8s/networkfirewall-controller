// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package firewall_policy

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.Description, b.ko.Spec.Description) {
		delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
	} else if a.ko.Spec.Description != nil && b.ko.Spec.Description != nil {
		if *a.ko.Spec.Description != *b.ko.Spec.Description {
			delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EncryptionConfiguration, b.ko.Spec.EncryptionConfiguration) {
		delta.Add("Spec.EncryptionConfiguration", a.ko.Spec.EncryptionConfiguration, b.ko.Spec.EncryptionConfiguration)
	} else if a.ko.Spec.EncryptionConfiguration != nil && b.ko.Spec.EncryptionConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.EncryptionConfiguration.KeyID, b.ko.Spec.EncryptionConfiguration.KeyID) {
			delta.Add("Spec.EncryptionConfiguration.KeyID", a.ko.Spec.EncryptionConfiguration.KeyID, b.ko.Spec.EncryptionConfiguration.KeyID)
		} else if a.ko.Spec.EncryptionConfiguration.KeyID != nil && b.ko.Spec.EncryptionConfiguration.KeyID != nil {
			if *a.ko.Spec.EncryptionConfiguration.KeyID != *b.ko.Spec.EncryptionConfiguration.KeyID {
				delta.Add("Spec.EncryptionConfiguration.KeyID", a.ko.Spec.EncryptionConfiguration.KeyID, b.ko.Spec.EncryptionConfiguration.KeyID)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.EncryptionConfiguration.Type, b.ko.Spec.EncryptionConfiguration.Type) {
			delta.Add("Spec.EncryptionConfiguration.Type", a.ko.Spec.EncryptionConfiguration.Type, b.ko.Spec.EncryptionConfiguration.Type)
		} else if a.ko.Spec.EncryptionConfiguration.Type != nil && b.ko.Spec.EncryptionConfiguration.Type != nil {
			if *a.ko.Spec.EncryptionConfiguration.Type != *b.ko.Spec.EncryptionConfiguration.Type {
				delta.Add("Spec.EncryptionConfiguration.Type", a.ko.Spec.EncryptionConfiguration.Type, b.ko.Spec.EncryptionConfiguration.Type)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.FirewallPolicy, b.ko.Spec.FirewallPolicy) {
		delta.Add("Spec.FirewallPolicy", a.ko.Spec.FirewallPolicy, b.ko.Spec.FirewallPolicy)
	} else if a.ko.Spec.FirewallPolicy != nil && b.ko.Spec.FirewallPolicy != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.FirewallPolicy.PolicyVariables, b.ko.Spec.FirewallPolicy.PolicyVariables) {
			delta.Add("Spec.FirewallPolicy.PolicyVariables", a.ko.Spec.FirewallPolicy.PolicyVariables, b.ko.Spec.FirewallPolicy.PolicyVariables)
		} else if a.ko.Spec.FirewallPolicy.PolicyVariables != nil && b.ko.Spec.FirewallPolicy.PolicyVariables != nil {
			if len(a.ko.Spec.FirewallPolicy.PolicyVariables.RuleVariables) != len(b.ko.Spec.FirewallPolicy.PolicyVariables.RuleVariables) {
				delta.Add("Spec.FirewallPolicy.PolicyVariables.RuleVariables", a.ko.Spec.FirewallPolicy.PolicyVariables.RuleVariables, b.ko.Spec.FirewallPolicy.PolicyVariables.RuleVariables)
			} else if len(a.ko.Spec.FirewallPolicy.PolicyVariables.RuleVariables) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.FirewallPolicy.PolicyVariables.RuleVariables, b.ko.Spec.FirewallPolicy.PolicyVariables.RuleVariables) {
					delta.Add("Spec.FirewallPolicy.PolicyVariables.RuleVariables", a.ko.Spec.FirewallPolicy.PolicyVariables.RuleVariables, b.ko.Spec.FirewallPolicy.PolicyVariables.RuleVariables)
				}
			}
		}
		if len(a.ko.Spec.FirewallPolicy.StatefulDefaultActions) != len(b.ko.Spec.FirewallPolicy.StatefulDefaultActions) {
			delta.Add("Spec.FirewallPolicy.StatefulDefaultActions", a.ko.Spec.FirewallPolicy.StatefulDefaultActions, b.ko.Spec.FirewallPolicy.StatefulDefaultActions)
		} else if len(a.ko.Spec.FirewallPolicy.StatefulDefaultActions) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.FirewallPolicy.StatefulDefaultActions, b.ko.Spec.FirewallPolicy.StatefulDefaultActions) {
				delta.Add("Spec.FirewallPolicy.StatefulDefaultActions", a.ko.Spec.FirewallPolicy.StatefulDefaultActions, b.ko.Spec.FirewallPolicy.StatefulDefaultActions)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.FirewallPolicy.StatefulEngineOptions, b.ko.Spec.FirewallPolicy.StatefulEngineOptions) {
			delta.Add("Spec.FirewallPolicy.StatefulEngineOptions", a.ko.Spec.FirewallPolicy.StatefulEngineOptions, b.ko.Spec.FirewallPolicy.StatefulEngineOptions)
		} else if a.ko.Spec.FirewallPolicy.StatefulEngineOptions != nil && b.ko.Spec.FirewallPolicy.StatefulEngineOptions != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.FirewallPolicy.StatefulEngineOptions.RuleOrder, b.ko.Spec.FirewallPolicy.StatefulEngineOptions.RuleOrder) {
				delta.Add("Spec.FirewallPolicy.StatefulEngineOptions.RuleOrder", a.ko.Spec.FirewallPolicy.StatefulEngineOptions.RuleOrder, b.ko.Spec.FirewallPolicy.StatefulEngineOptions.RuleOrder)
			} else if a.ko.Spec.FirewallPolicy.StatefulEngineOptions.RuleOrder != nil && b.ko.Spec.FirewallPolicy.StatefulEngineOptions.RuleOrder != nil {
				if *a.ko.Spec.FirewallPolicy.StatefulEngineOptions.RuleOrder != *b.ko.Spec.FirewallPolicy.StatefulEngineOptions.RuleOrder {
					delta.Add("Spec.FirewallPolicy.StatefulEngineOptions.RuleOrder", a.ko.Spec.FirewallPolicy.StatefulEngineOptions.RuleOrder, b.ko.Spec.FirewallPolicy.StatefulEngineOptions.RuleOrder)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.FirewallPolicy.StatefulEngineOptions.StreamExceptionPolicy, b.ko.Spec.FirewallPolicy.StatefulEngineOptions.StreamExceptionPolicy) {
				delta.Add("Spec.FirewallPolicy.StatefulEngineOptions.StreamExceptionPolicy", a.ko.Spec.FirewallPolicy.StatefulEngineOptions.StreamExceptionPolicy, b.ko.Spec.FirewallPolicy.StatefulEngineOptions.StreamExceptionPolicy)
			} else if a.ko.Spec.FirewallPolicy.StatefulEngineOptions.StreamExceptionPolicy != nil && b.ko.Spec.FirewallPolicy.StatefulEngineOptions.StreamExceptionPolicy != nil {
				if *a.ko.Spec.FirewallPolicy.StatefulEngineOptions.StreamExceptionPolicy != *b.ko.Spec.FirewallPolicy.StatefulEngineOptions.StreamExceptionPolicy {
					delta.Add("Spec.FirewallPolicy.StatefulEngineOptions.StreamExceptionPolicy", a.ko.Spec.FirewallPolicy.StatefulEngineOptions.StreamExceptionPolicy, b.ko.Spec.FirewallPolicy.StatefulEngineOptions.StreamExceptionPolicy)
				}
			}
		}
		if len(a.ko.Spec.FirewallPolicy.StatefulRuleGroupReferences) != len(b.ko.Spec.FirewallPolicy.StatefulRuleGroupReferences) {
			delta.Add("Spec.FirewallPolicy.StatefulRuleGroupReferences", a.ko.Spec.FirewallPolicy.StatefulRuleGroupReferences, b.ko.Spec.FirewallPolicy.StatefulRuleGroupReferences)
		} else if len(a.ko.Spec.FirewallPolicy.StatefulRuleGroupReferences) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.FirewallPolicy.StatefulRuleGroupReferences, b.ko.Spec.FirewallPolicy.StatefulRuleGroupReferences) {
				delta.Add("Spec.FirewallPolicy.StatefulRuleGroupReferences", a.ko.Spec.FirewallPolicy.StatefulRuleGroupReferences, b.ko.Spec.FirewallPolicy.StatefulRuleGroupReferences)
			}
		}
		if len(a.ko.Spec.FirewallPolicy.StatelessCustomActions) != len(b.ko.Spec.FirewallPolicy.StatelessCustomActions) {
			delta.Add("Spec.FirewallPolicy.StatelessCustomActions", a.ko.Spec.FirewallPolicy.StatelessCustomActions, b.ko.Spec.FirewallPolicy.StatelessCustomActions)
		} else if len(a.ko.Spec.FirewallPolicy.StatelessCustomActions) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.FirewallPolicy.StatelessCustomActions, b.ko.Spec.FirewallPolicy.StatelessCustomActions) {
				delta.Add("Spec.FirewallPolicy.StatelessCustomActions", a.ko.Spec.FirewallPolicy.StatelessCustomActions, b.ko.Spec.FirewallPolicy.StatelessCustomActions)
			}
		}
		if len(a.ko.Spec.FirewallPolicy.StatelessDefaultActions) != len(b.ko.Spec.FirewallPolicy.StatelessDefaultActions) {
			delta.Add("Spec.FirewallPolicy.StatelessDefaultActions", a.ko.Spec.FirewallPolicy.StatelessDefaultActions, b.ko.Spec.FirewallPolicy.StatelessDefaultActions)
		} else if len(a.ko.Spec.FirewallPolicy.StatelessDefaultActions) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.FirewallPolicy.StatelessDefaultActions, b.ko.Spec.FirewallPolicy.StatelessDefaultActions) {
				delta.Add("Spec.FirewallPolicy.StatelessDefaultActions", a.ko.Spec.FirewallPolicy.StatelessDefaultActions, b.ko.Spec.FirewallPolicy.StatelessDefaultActions)
			}
		}
		if len(a.ko.Spec.FirewallPolicy.StatelessFragmentDefaultActions) != len(b.ko.Spec.FirewallPolicy.StatelessFragmentDefaultActions) {
			delta.Add("Spec.FirewallPolicy.StatelessFragmentDefaultActions", a.ko.Spec.FirewallPolicy.StatelessFragmentDefaultActions, b.ko.Spec.FirewallPolicy.StatelessFragmentDefaultActions)
		} else if len(a.ko.Spec.FirewallPolicy.StatelessFragmentDefaultActions) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.FirewallPolicy.StatelessFragmentDefaultActions, b.ko.Spec.FirewallPolicy.StatelessFragmentDefaultActions) {
				delta.Add("Spec.FirewallPolicy.StatelessFragmentDefaultActions", a.ko.Spec.FirewallPolicy.StatelessFragmentDefaultActions, b.ko.Spec.FirewallPolicy.StatelessFragmentDefaultActions)
			}
		}
		if len(a.ko.Spec.FirewallPolicy.StatelessRuleGroupReferences) != len(b.ko.Spec.FirewallPolicy.StatelessRuleGroupReferences) {
			delta.Add("Spec.FirewallPolicy.StatelessRuleGroupReferences", a.ko.Spec.FirewallPolicy.StatelessRuleGroupReferences, b.ko.Spec.FirewallPolicy.StatelessRuleGroupReferences)
		} else if len(a.ko.Spec.FirewallPolicy.StatelessRuleGroupReferences) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.FirewallPolicy.StatelessRuleGroupReferences, b.ko.Spec.FirewallPolicy.StatelessRuleGroupReferences) {
				delta.Add("Spec.FirewallPolicy.StatelessRuleGroupReferences", a.ko.Spec.FirewallPolicy.StatelessRuleGroupReferences, b.ko.Spec.FirewallPolicy.StatelessRuleGroupReferences)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.FirewallPolicy.TLSInspectionConfigurationARN, b.ko.Spec.FirewallPolicy.TLSInspectionConfigurationARN) {
			delta.Add("Spec.FirewallPolicy.TLSInspectionConfigurationARN", a.ko.Spec.FirewallPolicy.TLSInspectionConfigurationARN, b.ko.Spec.FirewallPolicy.TLSInspectionConfigurationARN)
		} else if a.ko.Spec.FirewallPolicy.TLSInspectionConfigurationARN != nil && b.ko.Spec.FirewallPolicy.TLSInspectionConfigurationARN != nil {
			if *a.ko.Spec.FirewallPolicy.TLSInspectionConfigurationARN != *b.ko.Spec.FirewallPolicy.TLSInspectionConfigurationARN {
				delta.Add("Spec.FirewallPolicy.TLSInspectionConfigurationARN", a.ko.Spec.FirewallPolicy.TLSInspectionConfigurationARN, b.ko.Spec.FirewallPolicy.TLSInspectionConfigurationARN)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.FirewallPolicyName, b.ko.Spec.FirewallPolicyName) {
		delta.Add("Spec.FirewallPolicyName", a.ko.Spec.FirewallPolicyName, b.ko.Spec.FirewallPolicyName)
	} else if a.ko.Spec.FirewallPolicyName != nil && b.ko.Spec.FirewallPolicyName != nil {
		if *a.ko.Spec.FirewallPolicyName != *b.ko.Spec.FirewallPolicyName {
			delta.Add("Spec.FirewallPolicyName", a.ko.Spec.FirewallPolicyName, b.ko.Spec.FirewallPolicyName)
		}
	}
	if !ackcompare.MapStringStringEqual(ToACKTags(a.ko.Spec.Tags), ToACKTags(b.ko.Spec.Tags)) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}

	return delta
}
